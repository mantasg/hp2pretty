v0.10	2021-02-19	lazy text

Read input twice with Text.Lazy (thanks to David Hewson).
Allows processing huge input, speeds up less huge input too.


v0.9	2018-08-01	detach

New flags and features:
  --key=inline|FILE.txt     (optionally generate detached key)
  --title=inline|FILE.txt   (optionally generate detached title)


v0.8.0.2	2017-06-29	imports

Add imports to fix build with even older GHC versions.


v0.8.0.1	2017-06-29	semigroups

Depend on semigroups to fix build with older GHC versions.


v0.8	2017-06-29	patterns

New flags and features:
  --sort=size|stddev|name   (order bands by this property)
  --reverse                 (reverse sort order)
  --trace=1.0               (trace elements threshold percentage)
  --bands=15                (limit number of bands)
  --pattern                 (pattern fill, better for printing)


v0.7	2017-06-27	bugfix

A bugfix in header parsing (thanks to Pepe Iborra).  An
adjustment to text rendering (no longer stroked, but just
filled).  HTTPS for urls.


v0.6	2015-04-08	text

ByteString is replaced by Text, fixing bugs with Unicode.


v0.5	2011-10-15	acceleration

Vastly improved runtime performance thanks to 'floatshow'
and 'attoparsec' for (respectively) printing and parsing
floating point numbers.

Source code statistics: 544 lines, 3275 words, 20061 chars.


v0.4	2011-05-18	comparability

Colours are stable across program runs (based on a hash of
the label names).

Command line flag to use the same scale for all input files
(--uniform-scale=none|time|memory|both).

Usage change: specify XX.hp file(s) on the command line, the
output is to corresponding XX.svg files.

Source code statistics: 543 lines, 3273 words, 20045 chars.


v0.3	2010-11-02	special characters

Fixes a bug where broken SVG was generated when label names
contained XML-special characters.

Source code statistics: 484 lines, 2888 words, 17261 chars.


v0.2	2010-07-30	leaner and meaner

Memory usage and speed have both been improved, in part by
reading the entire file into a strict ByteString and making
two parsing passes over it, where the first pass accumulates
statistics and the second pass extracts the relevant data to
arrays, thus avoid large intermediate data structures.

Code abtraction has been improved, by separating the SVG
code into its own module and providing a Graphics interface,
so that later a PostScript implementation can be added more
easily.

Source code statistics: 475 lines, 2854 words, 17007 chars.


v0.1	2010-07-28	first release
The result of a few days hacking, hp2pretty is born.
Source code statistics: 397 lines, 2406 words, 14212 chars.
